pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'bubblesort-c'
        DOCKER_TAG = 'latest'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Ethan-DNG/JenkinsProject.git'
            }
        }

        stage('Build') {
            steps {
                echo 'Compilation du programme...'
                sh 'make clean && make all'
            }
        }

        stage('Test') {
            steps {
                echo 'Exécution des tests...'
                sh 'bash test/test_bubble.sh'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Construction de l\'image Docker...'
                script {
                    // Lancer la commande exacte du Dockerfile
                    sh 'sudo docker build -t bubblesort-c:latest .'
                }
            }
        }

        stage('Test Docker Image') {
            steps {
                echo 'Test de l\'image Docker...'
                script {
                    // Tester l'image avec la commande du Dockerfile
                    sh 'sudo docker run --rm bubblesort-c:latest'
                }
            }
        }

        stage('Archive') {
            steps {
                archiveArtifacts artifacts: '**/output.txt', fingerprint: true
                
                // Optionnel: sauvegarder l'image Docker
                script {
                    sh "sudo docker save ${DOCKER_IMAGE}:${DOCKER_TAG} -o ${DOCKER_IMAGE}-${DOCKER_TAG}.tar"
                    archiveArtifacts artifacts: "*.tar", fingerprint: true
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline terminé'
            
            // Nettoyer les images Docker pour économiser l'espace disque
            script {
                sh "sudo docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true"
            }
        }
        success {
            echo 'Build, tests et création Docker réussis !'
        }
        failure {
            echo 'Build, test ou création Docker échoué !'
        }
    }
}
